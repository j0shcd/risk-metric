{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Date: 2023-11-10, Price: 36768.42081912672\n",
      "Date: 2023-11-11, Price: 37344.249000720345\n",
      "Date: 2023-11-12, Price: 37122.722824306555\n",
      "Date: 2023-11-13, Price: 37067.69698212008\n",
      "Date: 2023-11-14, Price: 36549.16204829837\n",
      "Date: 2023-11-15, Price: 35545.201433454065\n",
      "Date: 2023-11-16, Price: 37903.66245166294\n",
      "Date: 2023-11-17, Price: 36201.51611146142\n",
      "Date: 2023-11-18, Price: 36527.76022530742\n",
      "Date: 2023-11-19, Price: 36582.36844192274\n",
      "Date: 2023-11-20, Price: 37413.99460790531\n",
      "Date: 2023-11-21, Price: 37489.298470802016\n",
      "Date: 2023-11-22, Price: 35965.36036068078\n",
      "Date: 2023-11-23, Price: 37464.83293220907\n",
      "Date: 2023-11-24, Price: 37293.316127426726\n",
      "Date: 2023-11-25, Price: 37738.93169747125\n",
      "Date: 2023-11-26, Price: 37809.85286625321\n",
      "Date: 2023-11-27, Price: 37491.838186008135\n",
      "Date: 2023-11-28, Price: 37250.16905148115\n",
      "Date: 2023-11-29, Price: 37802.23604377473\n",
      "Date: 2023-11-30, Price: 37810.34641654128\n",
      "Date: 2023-12-01, Price: 37711.81837585267\n",
      "Date: 2023-12-02, Price: 38688.25874179069\n",
      "Date: 2023-12-03, Price: 39481.666416062864\n",
      "Date: 2023-12-04, Price: 39960.275420410515\n",
      "Date: 2023-12-05, Price: 41974.331772543344\n",
      "Date: 2023-12-06, Price: 44105.94477259938\n",
      "Date: 2023-12-07, Price: 43788.28880825234\n",
      "Date: 2023-12-08, Price: 43270.11955970747\n",
      "Date: 2023-12-09, Price: 44202.17610943621\n",
      "Date: 2023-12-10, Price: 43745.49199189547\n",
      "Date: 2023-12-11, Price: 43757.959937619176\n",
      "Date: 2023-12-12, Price: 41200.96272610168\n",
      "Date: 2023-12-13, Price: 41450.819387377436\n",
      "Date: 2023-12-14, Price: 42931.76182603245\n",
      "Date: 2023-12-15, Price: 43009.5954563739\n",
      "Date: 2023-12-16, Price: 41992.01418722399\n",
      "Date: 2023-12-17, Price: 42247.06788172229\n",
      "Date: 2023-12-18, Price: 41410.819634575855\n",
      "Date: 2023-12-19, Price: 42684.182554683386\n",
      "Date: 2023-12-20, Price: 42250.206182797505\n",
      "Date: 2023-12-21, Price: 43634.1241684964\n",
      "Date: 2023-12-22, Price: 43849.69959939619\n",
      "Date: 2023-12-23, Price: 44003.6960216438\n",
      "Date: 2023-12-24, Price: 43752.03088478376\n",
      "Date: 2023-12-25, Price: 43034.971063091514\n",
      "Date: 2023-12-26, Price: 43638.236302200916\n",
      "Date: 2023-12-27, Price: 42516.426940282516\n",
      "Date: 2023-12-28, Price: 43418.46777504291\n",
      "Date: 2023-12-29, Price: 42600.65063315619\n",
      "Date: 2023-12-29, Price: 42509.01347353358\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "from datetime import datetime, timedelta\n",
    "\n",
    "class CoinGeckoAPI:\n",
    "    def __init__(self):\n",
    "        self.base_url = \"https://api.coingecko.com/api/v3\"\n",
    "\n",
    "    def get_historical_price(self, coin_id='bitcoin', currency='usd', days=50):\n",
    "        \"\"\"Retrieve historical price for a coin over the past 'days' days.\"\"\"\n",
    "        endpoint = f\"/coins/{coin_id}/market_chart\"\n",
    "        url = self.base_url + endpoint\n",
    "        params = {\n",
    "            'vs_currency': currency,\n",
    "            'days': days,\n",
    "            'interval': 'daily'\n",
    "        }\n",
    "        response = requests.get(url, params=params)\n",
    "        \n",
    "        if response.status_code == 200:\n",
    "            return response.json()['prices']\n",
    "        else:\n",
    "            raise Exception(f\"Error fetching historical price data: {response.status_code}\")\n",
    "\n",
    "# Example usage:\n",
    "if __name__ == \"__main__\":\n",
    "    cg_api = CoinGeckoAPI()\n",
    "    try:\n",
    "        historical_prices = cg_api.get_historical_price()\n",
    "        for entry in historical_prices:\n",
    "            timestamp, price = entry\n",
    "            date = datetime.fromtimestamp(timestamp/1000).strftime('%Y-%m-%d')\n",
    "            print(f\"Date: {date}, Price: {price}\")\n",
    "    except Exception as e:\n",
    "        print(e)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "ada",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
